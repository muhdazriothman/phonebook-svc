service: phonebook-svc

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x

  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: tokenAuthorizer
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization

  iam: 
    role: 
      statements: 
        - Effect: Allow
          Action: 'secretsmanager:*'
          Resource: "*"

# you can overwrite defaults here
#  stage: dev
  region: ap-southeast-1
  timeout: 30
  memorySize: 128

functions:
  createPhonebookEntry:
    handler: handler/phonebook-entry/create.handler
    name: 'create-phonebook-entry'
    events:
     - http:
        path: phonebook-entry
        method: post
        cors: true
        authorizer:
          name: tokenAuthorizer

  listPhonebookEntry:
    handler: handler/phonebook-entry/list.handler
    name: 'list-phonebook-entry'
    events:
     - http:
        path: phonebook-entry
        method: get
        cors: true
        authorizer:
          name: tokenAuthorizer

  getPhonebookEntry:
    handler: handler/phonebook-entry/get.handler
    name: 'get-phonebook-entry'
    events:
     - http:
        path: phonebook-entry/{id}
        method: get
        cors: true
        request: 
          parameters: 
             paths: 
               id: true
        authorizer:
          name: tokenAuthorizer

  updatePhonebookEntry:
    handler: handler/phonebook-entry/update.handler
    name: 'update-phonebook-entry'
    events:
     - http:
        path: phonebook-entry/{id}
        method: put
        cors: true
        request: 
          parameters: 
             paths: 
               id: true
        authorizer:
          name: tokenAuthorizer

  deletePhonebookEntry:
    handler: handler/phonebook-entry/delete.handler
    name: 'delete-phonebook-entry'
    events:
     - http:
        path: phonebook-entry/{id}
        method: delete
        cors: true
        request: 
          parameters: 
             paths: 
               id: true
        authorizer:
          name: tokenAuthorizer

  createUser:
    handler: handler/user/create.handler
    name: 'create-user'
    events:
     - http:
        path: user
        method: post
        cors: true

  loginUser:
    handler: handler/user/login.handler
    name: 'login-user'
    events:
     - http:
        path: login
        method: post
        cors: true
  
  tokenAuthorizer:
    handler: handler/authorizer/authorizer.handler
    name: 'token-authorizer'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'